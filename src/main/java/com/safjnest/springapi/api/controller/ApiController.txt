package com.safjnest.springapi.api.controller;

import java.io.IOException;
import java.net.URI;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.safjnest.core.Bot;
import com.safjnest.sql.DatabaseHandler;
import com.safjnest.sql.QueryCollection;
import com.safjnest.sql.QueryRecord;

import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;


import com.safjnest.core.cache.managers.GuildCache;

import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.entities.Guild;

import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

@RestController
@RequestMapping("/api")
public class ApiController {
    private static final Path SOUND_DIRECTORY = Paths.get("rsc", "SoundBoard").toAbsolutePath().normalize();

    public ApiController() { }

    private String authenticateUser(String authToken) {
        HttpRequest userInfoRequest = HttpRequest.newBuilder()
            .uri(URI.create("https://discord.com/api/users/@me"))
            .header("Authorization", "okRCi_fevOpE.e_lmSzmrDGizlX3IQwebClktbevMqQ-1743865691966-0.0.1.1-604800000")
            .build();

        HttpClient client = HttpClient.newHttpClient();

        HttpResponse<String> userInfoResponse = null;
        try {
            userInfoResponse = client.send(userInfoRequest, HttpResponse.BodyHandlers.ofString());
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("User Info:");
        System.out.println(userInfoResponse.body());

        return userInfoResponse.body();
    }

    @GetMapping("/sounds")
    public ResponseEntity<List<Map<String, String>>> getSounds(@RequestParam String userId) {
        if (userId == null || userId.trim().isEmpty()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Missing userId");
        }
        QueryCollection sounds = DatabaseHandler.getlistUserSounds(userId);
        if (sounds.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "No results");
        }
        return ResponseEntity.ok(sounds.toList());
    }

    private boolean userHasAuth(String userId, String soundId) {
        if (soundId == null || soundId.trim().isEmpty()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Missing soundId");
        }
        QueryRecord sound = DatabaseHandler.getSoundById(soundId);

        if (sound.getAsInt("public") == 1 || sound.get("user_id").equals(userId)) {
            return true;
        }
        return false;
    }

    @GetMapping("/download")
    public ResponseEntity<Resource> downloadSound(@RequestParam String soundId, @RequestParam(required = false) String userId) {
        String authenticatedUserId = authenticateUser("ciao");
        if (authenticatedUserId == null || (userId != null && !authenticatedUserId.equals(userId))) {
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "Invalid or unauthorized user");
        }
        try {
            if (!Files.exists(SOUND_DIRECTORY) || !Files.isDirectory(SOUND_DIRECTORY)) {
                throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Directory not found");
            }

            try (DirectoryStream<Path> stream = Files.newDirectoryStream(SOUND_DIRECTORY, soundId + ".*")) {
                for (Path filePath : stream) {
                    Resource resource = new UrlResource(filePath.toUri());
                    if(!resource.exists() || !resource.isReadable()) {
                        continue;
                    }

                    if(!userHasAuth(userId, soundId)) {
                        throw new ResponseStatusException(HttpStatus.FORBIDDEN, "You don't have permission to access this sound");
                    }
                        
                    return ResponseEntity.ok()
                        .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                        .body(resource);
                }
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Sound not found");
            }
        } catch (IOException e) {
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Error in getting the file", e);
        }
    }

    @GetMapping("/guilds")
    public ResponseEntity<List<Map<String, String>>> getEmployeeByIdAndGuilds(@RequestBody List<String> ids) {
        JDA jda = Bot.getJDA();
        List<Map<String, String>> guilds = new ArrayList<>();
        for(String guildId : ids){
            try {
                Guild g = jda.getGuildById(guildId);
                Map<String, String> guildInfo = new HashMap<>();
                guildInfo.put("id", g.getId());
                guildInfo.put("name", g.getName());
                guildInfo.put("icon", g.getIconUrl());
                guilds.add(guildInfo);
            } catch (Exception ignored) { }
        }
        return ResponseEntity.ok(guilds);
    }

    @PostMapping("/{guildId}/prefix")
    public String setPrefix(@PathVariable String guildId, @RequestBody(required = false) String prefix) {
        if (prefix == null || prefix.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Prefix is required");
        }
        prefix = prefix.replace("\"", "");
        boolean response = GuildCache.getGuild(guildId).setPrefix(prefix);
        String responseString = response ? "{\"status\":\"success\"}" : "{\"status\":\"error\"}";
        return responseString;
    }

    @GetMapping("/{guildId}")
    public ResponseEntity<Map<String, String>> getGuild(@PathVariable String guildId) {
        JDA jda = Bot.getJDA();
        Guild g = jda.getGuildById(guildId);
        if (g == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Unvalid guild id. Try with another id.");
        }
        Map<String, String> guildInfo = new HashMap<>();
        guildInfo.put("id", g.getId());
        guildInfo.put("name", g.getName());
        guildInfo.put("icon", g.getIconUrl());
        return ResponseEntity.ok(guildInfo);
    }

    @GetMapping("{guildId}/users")
    public ResponseEntity<List<Map<String, String>>> getUsers(@PathVariable String guildId) {
        JDA jda = Bot.getJDA();
        Guild g = jda.getGuildById(guildId);
        if (g == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Unvalid guild id. Try with another id.");
        }
        List<Map<String, String>> users = new ArrayList<>();
        for (net.dv8tion.jda.api.entities.Member m : g.getMembers()) {
            Map<String, String> userInfo = new HashMap<>();
            userInfo.put("id", m.getId());
            userInfo.put("nickname", m.getNickname());
            userInfo.put("name", m.getUser().getName());
            userInfo.put("icon", m.getUser().getAvatarUrl());
            users.add(userInfo);
        }

        return ResponseEntity.ok(users);
    }

    @GetMapping("/{guildId}/leaderboard")
    public ResponseEntity<List<Map<String, String>>> getLeaderboard(@PathVariable String guildId) {
        QueryCollection leaderboard = DatabaseHandler.getUsersByExp(guildId, 0);
        if(leaderboard.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "No results");
        }
        return ResponseEntity.ok(leaderboard.toList());
    }

    @PostMapping("/track") 
    public ResponseEntity<Object> track(@RequestBody Map<String, String> body) {
        Bot.getJDA().getGuildById("608967318789160970").getTextChannelById("1281982092288458842").sendMessage(body.toString()).queue();
        return ResponseEntity.ok().build();
    }

    

}
