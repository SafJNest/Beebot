package com.safjnest.util.spotify;


import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import jakarta.servlet.http.HttpServletResponse;

import org.springframework.http.*;

import java.io.IOException;
import java.util.Base64;

import org.springframework.beans.factory.annotation.Value;

@RestController
public class SpotifyController {

    private String clientId;
    private String clientSecret;
    private String redirectUri;

    private static final String SPOTIFY_AUTH_URL = "https://accounts.spotify.com/authorize";
    private static final String SPOTIFY_TOKEN_URL = "https://accounts.spotify.com/api/token";

    // Step 1: Redirect the user to Spotify's authorization page
    @GetMapping("/login")
    public void loginToSpotify(HttpServletResponse response) throws IOException {
        String authUrl = UriComponentsBuilder.fromHttpUrl(SPOTIFY_AUTH_URL)
            .queryParam("response_type", "code")
            .queryParam("client_id", clientId)
            .queryParam("redirect_uri", redirectUri)
            .queryParam("scope", "user-library-read") // Adjust scopes as necessary
            .toUriString();
        
        response.sendRedirect(authUrl);
    }

    // Step 2: Handle the callback and exchange the authorization code for an access token
    @GetMapping("/callback")
    public String handleSpotifyCallback(@RequestParam String code) {
        String token = exchangeCodeForAccessToken(code);
        return "Authenticated! Access Token: " + token;  // You can replace this with any logic for using the token
    }

    // Step 3: Exchange the authorization code for an access token
    private String exchangeCodeForAccessToken(String code) {
        RestTemplate restTemplate = new RestTemplate();

        // Set up the request body for token exchange
        String body = "grant_type=authorization_code&code=" + code + "&redirect_uri=" + redirectUri;
        
        // Create headers for the request, including Basic Auth
        String authHeader = new String(Base64.getEncoder().encode((clientId + ":" + clientSecret).getBytes()));
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Basic " + authHeader);
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);

        HttpEntity<String> entity = new HttpEntity<>(body, headers);
        
        // Make the POST request to exchange the code for an access token
        ResponseEntity<String> response = restTemplate.exchange(SPOTIFY_TOKEN_URL, HttpMethod.POST, entity, String.class);
        
        // Handle the response (parse JSON response here to get the access token)
        if (response.getStatusCode() == HttpStatus.OK) {
            // In real case, you'll want to parse the access token from the response JSON.
            return response.getBody();  // Just for demonstration
        } else {
            return "Error exchanging code for token!";
        }
    }

    @GetMapping("/getTrackCoverImage")
    public String getTrackCoverImage(@RequestParam String trackId) {
        // Create the URL for the track endpoint
        String trackUrl = SPOTIFY_API_BASE_URL + "/tracks/" + trackId;

        // Set up headers with Bearer Token for authorization
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + BEARER_TOKEN);
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<String> entity = new HttpEntity<>(headers);

        // Use RestTemplate to make the API call
        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<String> response = restTemplate.exchange(trackUrl, HttpMethod.GET, entity, String.class);

        // Parse the response and extract the album image URL
        if (response.getStatusCode() == HttpStatus.OK) {
            JSONObject jsonResponse = new JSONObject(response.getBody());
            JSONObject album = jsonResponse.getJSONObject("album");
            String imageUrl = album.getJSONArray("images")
                                   .getJSONObject(0) // Get the highest resolution image (you can adjust index)
                                   .getString("url");
            return imageUrl; // Return the image URL
        } else {
            return "Error: Could not retrieve track data.";
    }
}