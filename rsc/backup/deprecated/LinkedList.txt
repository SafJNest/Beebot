package com.safjnest.Utilities.Audio;

public class LinkedList<T> {
    private Node<T> head;
    private Node<T> tail;
    private Node<T> current;
    private int size;

    private static class Node<T> {
        T data;
        Node<T> prev;
        Node<T> next;

        Node(T data) {
            this.data = data;
        }
    }

    public synchronized void addToFront(T data) {
        Node<T> newNode = new Node<>(data);
        if (head == null) {
            head = tail = newNode;
        } else {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        }
        size++;
    }

    public synchronized void addToEnd(T data) {
        Node<T> newNode = new Node<>(data);
        if (tail == null) {
            head = tail = newNode;
        } else {
            newNode.prev = tail;
            tail.next = newNode;
            tail = newNode;
        }
        size++;
    }

    public synchronized void addAfterCurrent(T data) {
        if (current == null) {
            throw new IllegalStateException("Current node is not set");
        }

        Node<T> newNode = new Node<>(data);
        newNode.next = current.next;
        newNode.prev = current;

        if (current.next != null) {
            current.next.prev = newNode;
        } else {
            tail = newNode;
        }

        current.next = newNode;

        size++;
    }

    public synchronized void remove(T data) {
        Node<T> currentNode = head;
        while (currentNode != null) {
            if (currentNode.data.equals(data)) {
                if (currentNode.prev != null) {
                    currentNode.prev.next = currentNode.next;
                } else {
                    head = currentNode.next;
                }

                if (currentNode.next != null) {
                    currentNode.next.prev = currentNode.prev;
                } else {
                    tail = currentNode.prev;
                }

                size++;
                return;
            }
            currentNode = currentNode.next;
        }
    }

    public synchronized void moveToNext() {
        if (current == null) {
            current = head;
        } else {
            current = current.next;
        }
    }

    public synchronized void moveToPrevious() {
        if (current == null) {
            current = tail;
        } else {
            current = current.prev;
        }
    } 

    public synchronized T getCurrentData() {
        return (current != null) ? current.data : null;
    }

    public synchronized int size() {
        return size;
    }

    public synchronized void printList() {
        Node<T> currentNode = head;
        while (currentNode != null) {
            System.out.print(currentNode.data + " ");
            currentNode = currentNode.next;
        }
        System.out.println();
    }
}